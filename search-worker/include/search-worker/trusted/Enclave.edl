enclave {
  include "stdint.h"

  from "sgx_tstdc.edl" import *; // needed for mutex and lock_guard use
  from "sgx_pthread.edl" import *;

  from "attester.edl" import *;
  from "tchallenger.edl" import *;
  from "ratls_wolfssl.edl" import *;
  from "ratls-channel/common/channel_client.edl" import *;

  from "sgx_tstdc.edl" import *; // needed for mutex and lock_guard use
  from "sgx_tsgxssl.edl" import *; // needed for sgxssl
  from "sgx_pthread.edl" import*; // needed for sgxssl

  trusted {
    public sgx_status_t ecall_init([in, size=config_len] const char* config, size_t config_len, int cluster_size, int server_id);
    public sgx_status_t ecall_add_with_ids(
      [in, size=ereq_len] const char* ereq, size_t ereq_len,
      [out, size=eresp_len] char* eresp, size_t eresp_len
    );
    public sgx_status_t ecall_search(
      [in, size=ereq_len] const char* ereq, size_t ereq_len,
      [out, size=eresp_len] char* eresp, size_t eresp_len
    );
    public sgx_status_t ecall_rerank(
      [in, size=ereq_len] const char* ereq, size_t ereq_len,
      [out, size=eresp_len] char* eresp, size_t eresp_len
    );
    public void ecall_clear_exec_context();
  };

  untrusted {
#ifndef NDEBUG
    void ocall_debug_print([in, size=len] const void* s, size_t len);
    void ocall_debug_print_string([in, string] const char* str);
    void ocall_debug_print_hex([in, size=len] const void* str, size_t len);
    void ocall_debug_print_hexstring([in, string] const char* str);
#endif // NDEBUG
  };
};
