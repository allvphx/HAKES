// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc_api/sstcache.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SstCacheSvcClient is the client API for SstCacheSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SstCacheSvcClient interface {
	SstCacheReserve(ctx context.Context, in *SstCacheReserveRequest, opts ...grpc.CallOption) (*SstCacheReserveReply, error)
	SstCacheRelease(ctx context.Context, in *SstCacheReleaseRequest, opts ...grpc.CallOption) (*SstCacheReleaseReply, error)
	SstCacheAdd(ctx context.Context, in *SstCacheAddRequest, opts ...grpc.CallOption) (*SstCacheAddReply, error)
	SstCacheDrop(ctx context.Context, in *SstCacheDropRequest, opts ...grpc.CallOption) (*SstCacheDropReply, error)
}

type sstCacheSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSstCacheSvcClient(cc grpc.ClientConnInterface) SstCacheSvcClient {
	return &sstCacheSvcClient{cc}
}

func (c *sstCacheSvcClient) SstCacheReserve(ctx context.Context, in *SstCacheReserveRequest, opts ...grpc.CallOption) (*SstCacheReserveReply, error) {
	out := new(SstCacheReserveReply)
	err := c.cc.Invoke(ctx, "/hakes_store.SstCacheSvc/SstCacheReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sstCacheSvcClient) SstCacheRelease(ctx context.Context, in *SstCacheReleaseRequest, opts ...grpc.CallOption) (*SstCacheReleaseReply, error) {
	out := new(SstCacheReleaseReply)
	err := c.cc.Invoke(ctx, "/hakes_store.SstCacheSvc/SstCacheRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sstCacheSvcClient) SstCacheAdd(ctx context.Context, in *SstCacheAddRequest, opts ...grpc.CallOption) (*SstCacheAddReply, error) {
	out := new(SstCacheAddReply)
	err := c.cc.Invoke(ctx, "/hakes_store.SstCacheSvc/SstCacheAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sstCacheSvcClient) SstCacheDrop(ctx context.Context, in *SstCacheDropRequest, opts ...grpc.CallOption) (*SstCacheDropReply, error) {
	out := new(SstCacheDropReply)
	err := c.cc.Invoke(ctx, "/hakes_store.SstCacheSvc/SstCacheDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SstCacheSvcServer is the server API for SstCacheSvc service.
// All implementations must embed UnimplementedSstCacheSvcServer
// for forward compatibility
type SstCacheSvcServer interface {
	SstCacheReserve(context.Context, *SstCacheReserveRequest) (*SstCacheReserveReply, error)
	SstCacheRelease(context.Context, *SstCacheReleaseRequest) (*SstCacheReleaseReply, error)
	SstCacheAdd(context.Context, *SstCacheAddRequest) (*SstCacheAddReply, error)
	SstCacheDrop(context.Context, *SstCacheDropRequest) (*SstCacheDropReply, error)
	mustEmbedUnimplementedSstCacheSvcServer()
}

// UnimplementedSstCacheSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSstCacheSvcServer struct {
}

func (UnimplementedSstCacheSvcServer) SstCacheReserve(context.Context, *SstCacheReserveRequest) (*SstCacheReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SstCacheReserve not implemented")
}
func (UnimplementedSstCacheSvcServer) SstCacheRelease(context.Context, *SstCacheReleaseRequest) (*SstCacheReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SstCacheRelease not implemented")
}
func (UnimplementedSstCacheSvcServer) SstCacheAdd(context.Context, *SstCacheAddRequest) (*SstCacheAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SstCacheAdd not implemented")
}
func (UnimplementedSstCacheSvcServer) SstCacheDrop(context.Context, *SstCacheDropRequest) (*SstCacheDropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SstCacheDrop not implemented")
}
func (UnimplementedSstCacheSvcServer) mustEmbedUnimplementedSstCacheSvcServer() {}

// UnsafeSstCacheSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SstCacheSvcServer will
// result in compilation errors.
type UnsafeSstCacheSvcServer interface {
	mustEmbedUnimplementedSstCacheSvcServer()
}

func RegisterSstCacheSvcServer(s grpc.ServiceRegistrar, srv SstCacheSvcServer) {
	s.RegisterService(&SstCacheSvc_ServiceDesc, srv)
}

func _SstCacheSvc_SstCacheReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SstCacheReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SstCacheSvcServer).SstCacheReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.SstCacheSvc/SstCacheReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SstCacheSvcServer).SstCacheReserve(ctx, req.(*SstCacheReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SstCacheSvc_SstCacheRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SstCacheReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SstCacheSvcServer).SstCacheRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.SstCacheSvc/SstCacheRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SstCacheSvcServer).SstCacheRelease(ctx, req.(*SstCacheReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SstCacheSvc_SstCacheAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SstCacheAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SstCacheSvcServer).SstCacheAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.SstCacheSvc/SstCacheAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SstCacheSvcServer).SstCacheAdd(ctx, req.(*SstCacheAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SstCacheSvc_SstCacheDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SstCacheDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SstCacheSvcServer).SstCacheDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.SstCacheSvc/SstCacheDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SstCacheSvcServer).SstCacheDrop(ctx, req.(*SstCacheDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SstCacheSvc_ServiceDesc is the grpc.ServiceDesc for SstCacheSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SstCacheSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hakes_store.SstCacheSvc",
	HandlerType: (*SstCacheSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SstCacheReserve",
			Handler:    _SstCacheSvc_SstCacheReserve_Handler,
		},
		{
			MethodName: "SstCacheRelease",
			Handler:    _SstCacheSvc_SstCacheRelease_Handler,
		},
		{
			MethodName: "SstCacheAdd",
			Handler:    _SstCacheSvc_SstCacheAdd_Handler,
		},
		{
			MethodName: "SstCacheDrop",
			Handler:    _SstCacheSvc_SstCacheDrop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api/sstcache.proto",
}
