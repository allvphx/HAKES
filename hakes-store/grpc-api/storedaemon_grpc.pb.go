// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc_api/storedaemon.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreDaemonClient is the client API for StoreDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreDaemonClient interface {
	ScheduleJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobReply, error)
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
}

type storeDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreDaemonClient(cc grpc.ClientConnInterface) StoreDaemonClient {
	return &storeDaemonClient{cc}
}

func (c *storeDaemonClient) ScheduleJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobReply, error) {
	out := new(JobReply)
	err := c.cc.Invoke(ctx, "/hakes_store.StoreDaemon/ScheduleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDaemonClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/hakes_store.StoreDaemon/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreDaemonServer is the server API for StoreDaemon service.
// All implementations must embed UnimplementedStoreDaemonServer
// for forward compatibility
type StoreDaemonServer interface {
	ScheduleJob(context.Context, *JobRequest) (*JobReply, error)
	GetStats(context.Context, *StatsRequest) (*StatsReply, error)
	mustEmbedUnimplementedStoreDaemonServer()
}

// UnimplementedStoreDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedStoreDaemonServer struct {
}

func (UnimplementedStoreDaemonServer) ScheduleJob(context.Context, *JobRequest) (*JobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleJob not implemented")
}
func (UnimplementedStoreDaemonServer) GetStats(context.Context, *StatsRequest) (*StatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedStoreDaemonServer) mustEmbedUnimplementedStoreDaemonServer() {}

// UnsafeStoreDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreDaemonServer will
// result in compilation errors.
type UnsafeStoreDaemonServer interface {
	mustEmbedUnimplementedStoreDaemonServer()
}

func RegisterStoreDaemonServer(s grpc.ServiceRegistrar, srv StoreDaemonServer) {
	s.RegisterService(&StoreDaemon_ServiceDesc, srv)
}

func _StoreDaemon_ScheduleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDaemonServer).ScheduleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.StoreDaemon/ScheduleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDaemonServer).ScheduleJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDaemon_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDaemonServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.StoreDaemon/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDaemonServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreDaemon_ServiceDesc is the grpc.ServiceDesc for StoreDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hakes_store.StoreDaemon",
	HandlerType: (*StoreDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleJob",
			Handler:    _StoreDaemon_ScheduleJob_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _StoreDaemon_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api/storedaemon.proto",
}
