// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc_api/hakesstore.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HakesStoreKVRClient is the client API for HakesStoreKVR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HakesStoreKVRClient interface {
	// external service api
	Get(ctx context.Context, in *HakesStoreGetRequest, opts ...grpc.CallOption) (*HakesStoreGetReply, error)
	Put(ctx context.Context, in *HakesStorePutRequest, opts ...grpc.CallOption) (*HakesStorePutReply, error)
	Del(ctx context.Context, in *HakesStoreDelRequest, opts ...grpc.CallOption) (*HakesStoreDelReply, error)
	Scan(ctx context.Context, in *HakesStoreScanRequest, opts ...grpc.CallOption) (*HakesStoreScanReply, error)
	// put key send the log bytes and the log meta
	// log service
	InOpenLog(ctx context.Context, in *InOpenLogRequest, opts ...grpc.CallOption) (*InOpenLogReply, error)
	InAppendLog(ctx context.Context, in *InAppendLogRequest, opts ...grpc.CallOption) (*InAppendLogReply, error)
	InDropLog(ctx context.Context, in *InDropLogRequest, opts ...grpc.CallOption) (*InDropLogReply, error)
	// manifest service
	InUpdateManifest(ctx context.Context, in *InUpdateManifestRequest, opts ...grpc.CallOption) (*InUpdateManifestReply, error)
	// used for synchronization
	InGetSnapshot(ctx context.Context, in *InSnapshotRequest, opts ...grpc.CallOption) (*InSnapshotReply, error)
	InFlushSync(ctx context.Context, in *InFlushRequest, opts ...grpc.CallOption) (*InFlushReply, error)
}

type hakesStoreKVRClient struct {
	cc grpc.ClientConnInterface
}

func NewHakesStoreKVRClient(cc grpc.ClientConnInterface) HakesStoreKVRClient {
	return &hakesStoreKVRClient{cc}
}

func (c *hakesStoreKVRClient) Get(ctx context.Context, in *HakesStoreGetRequest, opts ...grpc.CallOption) (*HakesStoreGetReply, error) {
	out := new(HakesStoreGetReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) Put(ctx context.Context, in *HakesStorePutRequest, opts ...grpc.CallOption) (*HakesStorePutReply, error) {
	out := new(HakesStorePutReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) Del(ctx context.Context, in *HakesStoreDelRequest, opts ...grpc.CallOption) (*HakesStoreDelReply, error) {
	out := new(HakesStoreDelReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) Scan(ctx context.Context, in *HakesStoreScanRequest, opts ...grpc.CallOption) (*HakesStoreScanReply, error) {
	out := new(HakesStoreScanReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InOpenLog(ctx context.Context, in *InOpenLogRequest, opts ...grpc.CallOption) (*InOpenLogReply, error) {
	out := new(InOpenLogReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InOpenLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InAppendLog(ctx context.Context, in *InAppendLogRequest, opts ...grpc.CallOption) (*InAppendLogReply, error) {
	out := new(InAppendLogReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InAppendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InDropLog(ctx context.Context, in *InDropLogRequest, opts ...grpc.CallOption) (*InDropLogReply, error) {
	out := new(InDropLogReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InDropLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InUpdateManifest(ctx context.Context, in *InUpdateManifestRequest, opts ...grpc.CallOption) (*InUpdateManifestReply, error) {
	out := new(InUpdateManifestReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InUpdateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InGetSnapshot(ctx context.Context, in *InSnapshotRequest, opts ...grpc.CallOption) (*InSnapshotReply, error) {
	out := new(InSnapshotReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InGetSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hakesStoreKVRClient) InFlushSync(ctx context.Context, in *InFlushRequest, opts ...grpc.CallOption) (*InFlushReply, error) {
	out := new(InFlushReply)
	err := c.cc.Invoke(ctx, "/hakes_store.HakesStoreKVR/InFlushSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HakesStoreKVRServer is the server API for HakesStoreKVR service.
// All implementations must embed UnimplementedHakesStoreKVRServer
// for forward compatibility
type HakesStoreKVRServer interface {
	// external service api
	Get(context.Context, *HakesStoreGetRequest) (*HakesStoreGetReply, error)
	Put(context.Context, *HakesStorePutRequest) (*HakesStorePutReply, error)
	Del(context.Context, *HakesStoreDelRequest) (*HakesStoreDelReply, error)
	Scan(context.Context, *HakesStoreScanRequest) (*HakesStoreScanReply, error)
	// put key send the log bytes and the log meta
	// log service
	InOpenLog(context.Context, *InOpenLogRequest) (*InOpenLogReply, error)
	InAppendLog(context.Context, *InAppendLogRequest) (*InAppendLogReply, error)
	InDropLog(context.Context, *InDropLogRequest) (*InDropLogReply, error)
	// manifest service
	InUpdateManifest(context.Context, *InUpdateManifestRequest) (*InUpdateManifestReply, error)
	// used for synchronization
	InGetSnapshot(context.Context, *InSnapshotRequest) (*InSnapshotReply, error)
	InFlushSync(context.Context, *InFlushRequest) (*InFlushReply, error)
	mustEmbedUnimplementedHakesStoreKVRServer()
}

// UnimplementedHakesStoreKVRServer must be embedded to have forward compatible implementations.
type UnimplementedHakesStoreKVRServer struct {
}

func (UnimplementedHakesStoreKVRServer) Get(context.Context, *HakesStoreGetRequest) (*HakesStoreGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHakesStoreKVRServer) Put(context.Context, *HakesStorePutRequest) (*HakesStorePutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedHakesStoreKVRServer) Del(context.Context, *HakesStoreDelRequest) (*HakesStoreDelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedHakesStoreKVRServer) Scan(context.Context, *HakesStoreScanRequest) (*HakesStoreScanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedHakesStoreKVRServer) InOpenLog(context.Context, *InOpenLogRequest) (*InOpenLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InOpenLog not implemented")
}
func (UnimplementedHakesStoreKVRServer) InAppendLog(context.Context, *InAppendLogRequest) (*InAppendLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InAppendLog not implemented")
}
func (UnimplementedHakesStoreKVRServer) InDropLog(context.Context, *InDropLogRequest) (*InDropLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InDropLog not implemented")
}
func (UnimplementedHakesStoreKVRServer) InUpdateManifest(context.Context, *InUpdateManifestRequest) (*InUpdateManifestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InUpdateManifest not implemented")
}
func (UnimplementedHakesStoreKVRServer) InGetSnapshot(context.Context, *InSnapshotRequest) (*InSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InGetSnapshot not implemented")
}
func (UnimplementedHakesStoreKVRServer) InFlushSync(context.Context, *InFlushRequest) (*InFlushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlushSync not implemented")
}
func (UnimplementedHakesStoreKVRServer) mustEmbedUnimplementedHakesStoreKVRServer() {}

// UnsafeHakesStoreKVRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HakesStoreKVRServer will
// result in compilation errors.
type UnsafeHakesStoreKVRServer interface {
	mustEmbedUnimplementedHakesStoreKVRServer()
}

func RegisterHakesStoreKVRServer(s grpc.ServiceRegistrar, srv HakesStoreKVRServer) {
	s.RegisterService(&HakesStoreKVR_ServiceDesc, srv)
}

func _HakesStoreKVR_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HakesStoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).Get(ctx, req.(*HakesStoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HakesStorePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).Put(ctx, req.(*HakesStorePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HakesStoreDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).Del(ctx, req.(*HakesStoreDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HakesStoreScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).Scan(ctx, req.(*HakesStoreScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InOpenLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InOpenLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InOpenLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InOpenLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InOpenLog(ctx, req.(*InOpenLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InAppendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InAppendLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InAppendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InAppendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InAppendLog(ctx, req.(*InAppendLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InDropLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InDropLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InDropLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InDropLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InDropLog(ctx, req.(*InDropLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InUpdateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InUpdateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InUpdateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InUpdateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InUpdateManifest(ctx, req.(*InUpdateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InGetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InGetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InGetSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InGetSnapshot(ctx, req.(*InSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HakesStoreKVR_InFlushSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InFlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HakesStoreKVRServer).InFlushSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hakes_store.HakesStoreKVR/InFlushSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HakesStoreKVRServer).InFlushSync(ctx, req.(*InFlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HakesStoreKVR_ServiceDesc is the grpc.ServiceDesc for HakesStoreKVR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HakesStoreKVR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hakes_store.HakesStoreKVR",
	HandlerType: (*HakesStoreKVRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _HakesStoreKVR_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _HakesStoreKVR_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _HakesStoreKVR_Del_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _HakesStoreKVR_Scan_Handler,
		},
		{
			MethodName: "InOpenLog",
			Handler:    _HakesStoreKVR_InOpenLog_Handler,
		},
		{
			MethodName: "InAppendLog",
			Handler:    _HakesStoreKVR_InAppendLog_Handler,
		},
		{
			MethodName: "InDropLog",
			Handler:    _HakesStoreKVR_InDropLog_Handler,
		},
		{
			MethodName: "InUpdateManifest",
			Handler:    _HakesStoreKVR_InUpdateManifest_Handler,
		},
		{
			MethodName: "InGetSnapshot",
			Handler:    _HakesStoreKVR_InGetSnapshot_Handler,
		},
		{
			MethodName: "InFlushSync",
			Handler:    _HakesStoreKVR_InFlushSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api/hakesstore.proto",
}
